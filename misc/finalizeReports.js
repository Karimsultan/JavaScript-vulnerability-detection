import fs from "fs";
import fetch from "node-fetch";

const ID_PROPS = [
    "original",
    "type",
    "vendor_Package",
    "varName",
];

const data = JSON.parse(fs.readFileSync(process.argv[2]))// json reports with duplicate check

await Promise.all(data.map(report => addVersions(report)));
// console.log(data[0].version);


const addedIds = new Set();

const filtered = data
    .filter(entry => !entry.possibleDuplicate?.length && !entry.manualDupMatch?.length)
    .map(entry => {
        const [left, right] = entry.original.split("npm package");
        if (!right.startsWith(` (${entry.version})`)) {
            entry.original = `${left}npm package (${entry.version})${right}`;
        }
        return entry;
    })
    .filter(obj => {
        const id = ID_PROPS.reduce((acc, prop) => acc + obj[prop], "");
        if (addedIds.has(id)) {
            return false;
        } else {
            addedIds.add(id);
            return true;
        }
    });

const differentVendors = new Set(data.map(report => report.vendor_Package)).size;


console.log("number of reports: " , filtered.length);
console.log("number of different vendors in reports: ", differentVendors);


//  fs.writeFileSync(process.argv[3], reports.join("\n\n----------------------------------\n").toString());
fs.writeFileSync("finalReports.json", JSON.stringify(filtered, null, 4)); // "original" field contains finalized textual report.

async function addVersions(report) {
    if (report.version) {
        return;
    }

    const [owner, repo] = report.vendor_Package.split("/");
    const commit_sha = report.original.match(/is exported here: (.*)\./)[1].split("/")[5];
    try {
        const res = await fetch(`https://github.com/${owner}/${repo}/branch_commits/${commit_sha}`)
            .then(res => res.text());
                            
        const tag = Array.from(res.matchAll(/releases\/tag\/(.*)"/g)).at(-1)?.[1];
        console.log(tag);
        report.version = tag ? tag : "latest";
    } catch(error) {
        console.error(error);
        report.version = "latest";
    }
}