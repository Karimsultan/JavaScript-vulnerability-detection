import './App.css';
import { useEffect, useState } from 'react';
import { VulnView } from './VulnView';
import { Button, Checkbox, MenuItem, Select, FormControlLabel } from '@material-ui/core';
import { filesSorted, filesMarkers, useForceUpdate } from './utils';
import { getFromDb, putToDb } from './storage';

function exportJson(obj, filename) {
  const blob = new Blob([JSON.stringify(obj, null, 4)]);
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = filename;
  a.click();
  URL.revokeObjectURL(url);
}

function App() {
  const [vulnIndex, setVulnIndex] = useState(0);
  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [hideDone, setHideDone] = useState(false);
  const forceUpdate = useForceUpdate();
  useEffect(() => {
    getFromDb().then(vulns => setVulnerabilities(vulns));
  }, []);

  function onVulnUpdate() {
    putToDb(vulnerabilities);
    forceUpdate();
  }
  
  function handleChange(event) {
    setVulnIndex(event.target.value);
  }

  function importFile() {
    const input = document.createElement("input");
    input.type = "file";
    input.onchange = async () => {
      const file = input.files[0];
      const text = await file.text();
      setVulnerabilities(JSON.parse(text));
      putToDb(vulnerabilities);
      setVulnIndex(0);
    }
    input.click();
  }

  function saveFile() {
    exportJson(vulnerabilities, "partialResult.json");
  }

  function exportConfirmed() {
    const confirmed = vulnerabilities
      .flatMap(vuln => vuln.files)
      .flatMap(file => file.affectedFunctions)
      .filter(func => func.confirmed)
      .map(func => func.vulnerable);
    exportJson(confirmed, "confirmedFunctions.json");
  }

  return (<>
    <h2 style={{textAlign: 'center'}}>Manual filtering framework for vulnerable functions</h2>
    <Button onClick={() => setVulnIndex(i => i - 1)} disabled={vulnIndex < 1}>Prev</Button>
    {vulnerabilities.length
        ? <Select value={vulnIndex} onChange={handleChange}>
            {vulnerabilities.map((vuln, i) => (!hideDone || !filesSorted(vuln)) && 
              <MenuItem value={i} key={i}>
                [{i}]
                {vuln.vulnType}
                {filesSorted(vuln) ? "(âœ”)" : ""}
                {filesMarkers(vuln).join("")}
              </MenuItem>
            )}
        </Select>
        : null
    }
    <Button onClick={() => setVulnIndex(i => i + 1)} disabled={vulnIndex >= vulnerabilities.length}>Next</Button>
    <Button onClick={importFile}>Import file</Button>
    <Button onClick={saveFile}>Save file</Button>
    <Button onClick={exportConfirmed}>Export confirmed functions</Button>
    <FormControlLabel
      control={<Checkbox onChange={(e, checked) => setHideDone(checked)} label="Hide done" ></Checkbox>}
      label="Hide done"
    />
    
    <div class="main">
    {vulnerabilities[vulnIndex] && <VulnView vulnerability={vulnerabilities[vulnIndex]} onChange={onVulnUpdate}></VulnView>}
    </div>
  </>);
}

export default App;
