export function getVulns() {
    const length = localStorage.getItem("length");
    if (!length) {
        return [];
    }
    return Array(length).fill()
        .map((v, i) => JSON.parse(localStorage.getItem(i)));
}

export function saveVulns(vulns) {
    localStorage.setItem("length", vulns.length);
    vulns.forEach((vuln, i) => localStorage.setItem(i, JSON.stringify(vuln)));
}

const dbPromise = new Promise((res, rej) => {
    const request = window.indexedDB.open("vulns", 4);
    request.onerror = (event) => {
        rej(event);
    };
    request.onupgradeneeded = (event) => {
        const db = event.target.result;
        if (db.objectStoreNames.contains("vulns")) {
            db.deleteObjectStore("vulns");
        }
        db.createObjectStore("vulns", {autoIncrement: true});
    }
    request.onsuccess = (event) => {
        const db = event.target.result;
        res(db);
    };
});

async function getStore() {
    const db = await dbPromise;
    return db.transaction(["vulns"], "readwrite").objectStore("vulns");
}

export async function getFromDb() {
    const store = await getStore();
    return new Promise((res, rej) => {
        const req = store.getAll();
        req.onsuccess = (event) => res(event.target.result);
        req.onerror = (event) => res([]);
    });
}

export async function putToDb(vulns) {
    const store = await getStore();
    await new Promise((res, rej) => {
        const req = store.clear();
        req.onsuccess = (event) => res();
        req.onerror = (event) => res();
    });
    
    await Promise.all(vulns.map(vuln =>
        new Promise((res, rej) => {
            const req = store.add(vuln);
            req.onsuccess = (event) => res();
            req.onerror = (event) => res();
        })
    ));
}