import { useState } from "react";

export function filesMarkers(vuln) {
    return Array.from(
        new Set(
            vuln.files.flatMap(file => functionsMarkers(file))
        )
    );
}

export function functionsMarkers(file) {
    return Array.from(
        new Set(
            file.affectedFunctions.flatMap(func => functionMarkers(func))
        )
    );
}

export function functionMarkers(func) {
    return Object.entries(statusMarkers)
        .map(([marker, test]) => test(func) ? marker : "")
        .filter(Boolean);
}

export function filesSorted(vuln) {
    return vuln.files.every(functionsSorted);
}

export function functionsSorted(file) {
    return file.affectedFunctions
        .every(func => typeof func.confirmed === 'boolean');
}

export function statusLabel(func) {
    let statusLabel;
    switch(func.confirmed) {
        case true:
            statusLabel =  "(✔)";
            break;
        case false:
            statusLabel =  "(✖)";
            break;
        default:
            statusLabel =  "";
            break;
    }
    return statusLabel;
}

export function useForceUpdate(){
    const [value, setValue] = useState(0);
    return () => setValue(value => value + 1);
}

const statusMarkers = {
    "(e)": (func) => !!func.evilRe,
    "(r)": (func) => !!func.redos,
    "(p)": (func) => !!func.protoPollution,
    "(xss)": (func) => !!func.xss
}