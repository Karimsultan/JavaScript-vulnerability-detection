
import fetch from "node-fetch";
import DomParser from "dom-parser";
import fs from "fs";
import { categorizeLinks } from "./sortLinks";

const parser = new DomParser();


const url = num => `https://snyk.io/vuln/page/${num}?type=npm`

const regex = /href="(\/vuln\/(SNYK-JS-.*?-\d*|npm:.*?:\d*?))"/gm;
const infoObjs = []


async function main(){

    for (let i = 1; i <= 100; i++){  // 100, because at the moment of accessing Snyk database there were 100 pages with npm vulnerabilities
        console.log("page: " + i);
        const html = await fetch(url(i))
                .then(res => res.text());
        const vulnPages = Array.from(html.matchAll(regex))
            .map(match => "https://snyk.io" + match[1]);
        console.log("VulnPages: ", vulnPages.length);
        
        for(const page of vulnPages){
            try {

                const htmlStr = await fetch(page)
                        .then(res => res.text())
                
                const html = parser.parseFromString(htmlStr);

                const linksAndNames = getLinks(html);

                if (linksAndNames?.length) {

                    const info = getInfo(html);
                    infoObjs.push({linksAndNames, page, ...info})
                }
            } catch (error) {
                console.log(page);
                throw error;
            }
        }
    }
    console.log("Info objects done");
    console.log("Objects: ", infoObjs.length);
    console.log("Unique: ", new Set(infoObjs.map(obj => obj.packageName)));
    const categorized = categorizeLinks(infoObjs);
    console.log("Writing file");
    fs.writeFileSync(process.argv[2], JSON.stringify(categorized, null, 2)); //file with sorted links and details about every vulnerability
    console.log("write file done");
 }

function getLinks(html){
    const overview = html.getElementsByClassName("prose")[0];

    // <li> with links and names
    const cardContent = overview
        ?.getElementsByClassName("card__content")[0];
    const sections = cardContent?.childNodes
        .filter(node => node.nodeName !== "#text");
    const referenceHeaderIndex = sections
        ?.findIndex(section => section.textContent.trim() === "References");

    if (referenceHeaderIndex && referenceHeaderIndex !== -1) {
        const references = sections[referenceHeaderIndex + 1];
        
        const links = references.getElementsByTagName("a").map(element => element.getAttribute("href"));
        const names = references.getElementsByTagName("a").map(element => element.textContent);
        //  console.log(names);
        
        const linksAndNames = links.map((link, i) => {return {link, "name":names[i]}});
        
        return linksAndNames;
    }
}

function getInfo(html){

    const header = html.getElementsByClassName("header__lede")[0]
    const packageName = header.getElementsByClassName("breadcrumbs__list-item__link")[0].textContent
    const versions = header.lastChild.textContent;

    const box = html.getElementsByClassName("vuln-sidebar-offset")[0];
    const smallerBox = box.childNodes.filter(n => !n.text).slice(-1)[0];

    const info = smallerBox.getElementsByTagName("a").map(el => el.textContent).filter(el => el.trim());

    const vulnType = html.getElementsByClassName("header__title__text")[0].innerHTML
    const details = html.getElementsByClassName("card__content")[1]
                    .getElementsByTagName("p")
                    .slice(0,2)
                    .reduce((acc, p) => acc + p.textContent, "  ")

    return {vulnType,
            details,
            "CVE": info.find(value => value.includes("CVE")),
            "CWE": info.find(value => value.includes("CWE")),
            packageName,
            versions
            }
    
}


 main()

