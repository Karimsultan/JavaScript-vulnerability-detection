import fs from "fs";
import path from "path";
import espree from "espree";
import { allChildNodes } from "./refactor/utils.mjs";
import { isFunctionNode } from "./refactor/utils.mjs";


const ids = fs.readdirSync("./unpacked");
let obj = []


const getFiles = function(dirPath, arrayOfFiles) {
    const files = fs.readdirSync(dirPath)
  
    arrayOfFiles = arrayOfFiles || []
  
    files.forEach(function(file) {
      if (fs.statSync(dirPath + "/" + file).isDirectory()) {
        arrayOfFiles = getFiles(dirPath + "/" + file, arrayOfFiles)
      } else {
        arrayOfFiles.push(path.join(dirPath, "/", file))
      }
    })
  
    return arrayOfFiles
}


const getFunctions = function (file) {

    const code = fs.readFileSync(file).toString();

    const tree = espree.parse(code, {
        loc: true,
        range: true,
        tolerant: true,
        ecmaVersion: 12,
        ecmaFeatures: {
            jsx: false,
            globalReturn: true
        },
        sourceType: "module",
    });

    const affectedFunctionNodes = allChildNodes(tree)
        .filter(node => isFunctionNode(node));
    return affectedFunctionNodes
        .map(node => code.slice(...node.range));
}




function main(){

    let i = 0;

    for(const id of ids) {
        i++;
        console.log(id);
        const files = getFiles("./unpacked/" + id);

        const funcObj = []
        
        for(const file of files) {
            try{
            const functions = getFunctions(file).filter(func => func.length > 50);
            funcObj.push({
                file: path.basename(file),
                code: functions
            })
            }
            catch(e) {
                fs.appendFileSync("./FuncExtractError.txt", `${id}: ${e} \n`)
            }
        }
        
        if(i % 100 == 0 || i == (ids.length-1)) {
            fs.writeFileSync(`./extensions${i}.json`, JSON.stringify(obj, null, 2));
            obj = [];
        }
        else{
            obj.push({
                id,
                functions: funcObj
            })
        }
    }

}

main()

