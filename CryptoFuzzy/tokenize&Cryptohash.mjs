import * as fs from 'fs';
import { createHash } from "crypto";
import { represent } from './represent.mjs';

const INPUT = process.argv[2];
const MAPPING = process.argv[3];

async function main() {
	const data = JSON.parse(fs.readFileSync(INPUT));
	const addedVectors = new Set();

	const functions = data
		.map((obj, i) => {
			if (!(i % 1000)) {
				console.log("done: " + i);
			}

			try {
				obj.vector = represent(obj.function); // tokenize function and add tokenized version to the object
				return obj;
			} catch (e) {
				return null;
			}
		})
		.filter(obj => {
			if (!obj || addedVectors.has(obj.vector + obj.fileLink)) {
				return false;
			} else {
				const key = obj.vector + obj.fileLink;
				addedVectors.add(key);
				obj.hash = createHash('sha1')   // create hash for the tokenized version and add it to the object
					.update(obj.vector)
					.digest('hex');
				return true;
			}
		});

	console.log("representation done");
	
	fs.writeFileSync(MAPPING, JSON.stringify(functions, null, 4));

	console.log(`Done; ${functions.length} functions total`);
}
	 
main();
