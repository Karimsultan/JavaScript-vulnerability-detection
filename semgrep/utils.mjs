import { extractRegexesFromSource } from "./findRegex.mjs";
import safe from "safe-regex";
import fs from "fs";
import { spawnSync } from "child_process";

export function semgrep(func, ruleFile) {
    fs.writeFileSync("temp.js", func);
    const semgrep = spawnSync("semgrep", [`--config=${ruleFile}`, "--json", "./temp.js"]);
    fs.rmSync("temp.js");

    const result = JSON.parse(semgrep.stdout.toString());
    const err = semgrep.stderr.toString();
    if (!result) {
        console.log(err);
    }
    const usefulInfo = result.results.map(el => {
        return {"ruleID": el.check_id,
                    "vulnVar": el.extra.metavars["$KEY"].abstract_content,
                    "loc": {
                        "start": {
                        "line": el.extra.metavars["$KEY"].start.line,
                        "column": el.extra.metavars["$KEY"].start.col
                        },
                        "end": {
                        "line": el.extra.metavars["$KEY"].end.line,
                        "column": el.extra.metavars["$KEY"].end.col
                        }
                    },
        }
    });

    return usefulInfo;
}

export function evilRegExes(func) {
    try{
        const iterator = extractRegexesFromSource("const name = " + func, null);
        const arr = Array.from(iterator).map(regex => regex.pattern);
        
        return arr.filter(el => !safe(el));
    } catch(e) {
        console.error(e);
        return [];
    }
}